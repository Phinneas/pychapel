#!/usr/bin/env python
import argparse
import logging
import pprint
import json
import os

from pych.version import APP_NAME, APP_VERSION
from pych.compiler import moduralize
from pych import CONFIG

def verify_conf(conf):
    """Sanity checks the configuration."""

    logging.info("Checking installation...")
    logging.info(" * Templates")
    for slang in conf["specializers"]["templates"]:
        template_dir = conf["specializers"]["templates"][slang]
        if not os.path.exists(template_dir):
            logging.error(
                "Missing template dir(%s) for slang(%s)",
                template_dir,
                slang
            )

    logging.info(" * Object Storage")
    try:
        for slang in conf["object_store"]["output_paths"]:
            o_path = conf["object_store"]["output_paths"][slang]
            path = os.sep.join([
                conf["object_store"]["root_path"],
                o_path,
                'write_test'
            ])
            with open(path, 'w') as fd:
                fd.write("test")
    except Exception as e:
        logging.error("Error trying to write to object-store: %s", e)

    # Check that Chapel libraries are there
    logging.info(" * Libraries")

    # Check that c-headers are there
    logging.info(" * Headers")

    # Check that the commands are invokable
    logging.info(" * Commands")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Tool aiding the Python/Chapel (pyChapel)  module'
    )
    parser.add_argument(
        '--compile',
        metavar="source_file",
        type=str,
        help='Compile the given Chapel module source-code into a Python module.'
    )
    parser.add_argument(
        '--check',
        action="store_const",
        const=True,
        default=False,
        help="Check the pyChapel installation / configuration"
    )
    parser.add_argument(
        '--version',
        action="store_const",
        const=True,
        default=False,
        help="Print version"
    )

    args = parser.parse_args()
    if args.check:
        if not CONFIG:
            logging.info("pyChapel: Cannot find configuration file (pych.json).")
        else:
            verify_conf(CONFIG)
            logging.info("No errors above? You are all good to go!")
    elif args.compile:
        logging.info("Compile this")
    elif args.version:
        logging.info("%s %s" % (APP_NAME, APP_VERSION))
    else:
        parser.print_help()
